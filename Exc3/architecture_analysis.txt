1. Проблемы текущей архитектуры

1.1 Синхронное взаимодействие между сервисами

    Сервисы core-app и ins-comp-settlement напрямую взаимодействуют с ins-product-aggregator через REST API.
    Задержки или ошибки при запросах к страховым компаниям могут приводить к сбоям в работе всей цепочки.

1.2 Отсутствие кэширования в ins-product-aggregator

    Каждый запрос к ins-product-aggregator запускает обращения ко всем страховым компаниям, что увеличивает время ответа и создает нагрузку на их API.

1.3 Ручное управление репликами данных

    Сервисы core-app и ins-comp-settlement периодически обновляют локальные копии данных. Это усложняет синхронизацию данных и приводит к возможным расхождениям.

1.4 Проблемы с масштабируемостью

    С увеличением числа страховых компаний (с 5 до 10 и более) возрастают задержки и нагрузка на ins-product-aggregator. Это может привести к деградации производительности.

1.5 Жесткая зависимость между сервисами

    ins-comp-settlement синхронно запрашивает данные у core-app, что приводит к проблемам с производительностью и доступностью в случае отказов.

2. Риски при росте нагрузки

2.1 Повышение нагрузки на API страховых компаний

    С увеличением числа компаний возрастет количество запросов, что может привести к блокировке IP или лимитированию запросов.

2.2 Увеличение задержек и времени отклика

    Рост нагрузки на ins-product-aggregator увеличивает время ответа и вероятность ошибок.

2.3 Низкая отказоустойчивость

    Синхронные запросы между сервисами создают жесткие зависимости, что может вызвать каскадный сбой.

3. Предложенные решения

3.1 Внедрение Event-Streaming

    Использовать систему стриминга (например, Kafka) для передачи данных о продуктах и тарифах.
    ins-product-aggregator публикует данные в виде событий, а core-app и ins-comp-settlement подписываются на эти события для получения обновлений.

3.2 Кэширование данных в ins-product-aggregator

    Реализовать кэширование (например, Redis) для хранения данных, полученных от страховых компаний.
    Это сократит время ответа и снизит нагрузку на API страховых компаний.

3.3 Использование паттерна Transactional Outbox

    Обеспечить согласованность данных между ins-product-aggregator и Kafka через паттерн Transactional Outbox.

3.4 Асинхронное взаимодействие между сервисами

    core-app публикует события о новых страховках в Kafka, а ins-comp-settlement подписывается на эти события для получения данных.
    Это устранит прямую зависимость между сервисами.

3.5 Поддержка горизонтального масштабирования

    Обеспечить возможность масштабирования ins-product-aggregator и других сервисов при увеличении числа страховых компаний.

4. Обновленная архитектура

    Сервисы core-app и ins-comp-settlement подписываются на поток событий Kafka для получения обновлений о продуктах.
    ins-product-aggregator использует кэш для ускорения работы и публикует данные в Kafka через Transactional Outbox.
    ins-comp-settlement получает данные о новых страховках через подписку на события, а не через синхронный REST API.

5. Результаты и выгоды

    Уменьшение времени ответа и нагрузки на API страховых компаний.
    Повышение отказоустойчивости за счет устранения жестких синхронных зависимостей.
    Возможность масштабирования системы без изменения структуры взаимодействия сервисов.
    Снижение количества ошибок при взаимодействии сервисов.

6. Риски внедрения и их смягчение

6.1 Сложность реализации Event-Streaming

    Решение: начать с минимального внедрения Kafka и обучить команду работы с Event-Driven архитектурой.

6.2 Необходимость изменений в сервисах

    Решение: проводить изменения итеративно, тестируя каждую часть системы на небольших нагрузках.